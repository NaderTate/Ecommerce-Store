generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  Title       String
  Price       Float
  Description String          @default("")
  Images      Json[]          @default([])
  mainImg     String
  secondImage String
  Categories  Category[]      @relation(fields: [CategoryIDs], references: [id])
  CategoryIDs String[]        @db.ObjectId
  Colors      String[]        @default([])
  Properties  Json
  OrderIDs    String[]        @db.ObjectId
  Reviews     Review[]
  Rating      Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Cart        CartItem[]
  WhishList   WhishListItem[]
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  label       String
  value       Int
  Image       String
  Properties  Json[]
  Parent      Category?  @relation(name: "CategoryToCategory", fields: [ParentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation(name: "CategoryToCategory")
  ParentId    String?    @db.ObjectId
  Products    Product[]  @relation(fields: [ProductsIDs], references: [id])
  ProductsIDs String[]   @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model User {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  UserId    String          @unique
  Name      String
  Email     String
  Phone     String
  BirthDate String
  Gender    String
  Image     String
  Orders    Order[]
  Address   Address[]
  Review    Review[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  Cart      CartItem[]
  WhishList WhishListItem[]
  Card      Card?
}

model Order {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  UserId         String       @unique
  User           User         @relation(fields: [UserId], references: [UserId])
  PaymentMethod  String
  OrderTotal     Float
  CompletedOn    String
  Products       CartItem[]
  IsComplete     Boolean
  Address        Address      @relation(fields: [AddressId], references: [id])
  AddressId      String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  OrderSummary   OrderSummary @relation(fields: [OrderSummaryId], references: [id])
  OrderSummaryId String       @unique @db.ObjectId
}

model OrderSummary {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  subtotal   Int
  Shipping   Int
  CODFee     Int
  total      Int
  voucher    Int
  orderTotal Int
  Order      Order?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  UserId    String?  @unique
  User      User?    @relation(fields: [UserId], references: [UserId])
  Product   Product  @relation(fields: [ProductId], references: [id])
  ProductId String   @unique @db.ObjectId
  Quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @db.ObjectId
}

model WhishListItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  UserId    String   @unique
  User      User     @relation(fields: [UserId], references: [UserId])
  Product   Product  @relation(fields: [ProductId], references: [id])
  ProductId String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  UserId     String   @unique
  User       User     @relation(fields: [UserId], references: [UserId])
  Orders     Order[]
  Country    String
  City       String
  Street     String
  Building   String
  PostalCode String
  Landmark   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  UserId    String   @unique
  User      User     @relation(fields: [UserId], references: [UserId])
  Product   Product  @relation(fields: [ProductId], references: [id])
  ProductId String   @db.ObjectId
  Rating    Int
  Comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  UserId     String   @unique
  User       User     @relation(fields: [UserId], references: [UserId])
  CardType   String?
  HolderName String?
  CardNumber String
  Expiry     String
  CVV        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
